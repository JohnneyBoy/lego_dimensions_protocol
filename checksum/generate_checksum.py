#-------------------------------------------------------------------------------
# Name:        module2
# Purpose:
#
# Author:      User
#
# Created:     15/11/2015
# Copyright:   (c) User 2015
# Licence:     <your licence>
#-------------------------------------------------------------------------------


import usb.core
import usb.util
import time





##
### find our device
##dev = usb.core.find(idVendor=0x0e6f)# 0x0e6f Logic3 (made lego dimensions portal hardware)
##
### was it found?
##if dev is None:
##    raise ValueError('Device not found')
##
### set the active configuration. With no arguments, the first
### configuration will be the active one
##dev.set_configuration()
##
##
##print dev.write(1, [0x55, 0x0f, 0xb0, 0x01, 0x28, 0x63, 0x29, 0x20, 0x4c, 0x45, 0x47, 0x4f, 0x20, 0x32, 0x30, 0x31, 0x34, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])# Startup


def twos_comp(val, bits):
    """compute the 2's compliment of int value val
    http://stackoverflow.com/questions/1604464/twos-complement-in-python"""
    if (val & (1 << (bits - 1))) != 0: # if sign bit is set e.g., 8bit: 128-255
        val = val - (1 << bits)        # compute negative value
    return val                         # return positive value as is


def compute_checksum_add(byte_list):
    """Compute the checksum byte for the lego portal USB protocol"""
    checksum = 0
    for current_byte in byte_list:
        checksum = checksum + current_byte
    #print("checksum:"+repr(checksum))
    remainder = checksum % 16
    #print("remainder:"+repr(remainder))
    return remainder


def compute_checksum_bitwise_add(byte_list):
    """Compute the checksum byte for the lego portal USB protocol"""
    checksum = 255
    for current_byte in byte_list:
        checksum = checksum ^ current_byte
        #print("checksum:"+repr(checksum))
    return checksum

def compute_checksum_overflow_add(byte_list):
    """Compute the checksum byte for the lego portal USB protocol"""
    checksum = 255
    for current_byte in byte_list:
        checksum = checksum + current_byte
        if checksum > 255:
            checksum = checksum - 255
        #print("checksum:"+repr(checksum))
    return checksum


def compute_checksum_overflow_bitwise_add(byte_list):
    """Compute the checksum byte for the lego portal USB protocol"""
    checksum = 255
    for current_byte in byte_list:
        checksum = checksum ^ current_byte
        if checksum > 255:
            checksum = checksum - 255
        #print("checksum:"+repr(checksum))
    return checksum


def test_xor_parity():
    """Find out if xor parity is used"""
    #        [0x55,0x14,0xc6,0x1a,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
    packet = [0x55,0x14,0xc6,0x1a,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,]
    result = 0
    for word in packet:
        result = result ^ word
    print hex(result)


def bulk_xor():
    """foo"""
    packets = [
        [0x55, 0x04, 0xd2, 0x2c, 0x00, 0x26, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2e, 0x01, 0x26, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x30, 0x02, 0x26, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2e, 0x03, 0x26, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2f, 0x03, 0x23, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3f, 0x03, 0x23, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2c, 0x03, 0x23, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x0d, 0x03, 0x23, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x1c, 0x03, 0x23, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x1d, 0x03, 0x23, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3e, 0x03, 0x23, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3f, 0x03, 0x23, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x00, 0x03, 0x23, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x01, 0x03, 0x23, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x02, 0x03, 0x23, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x03, 0x03, 0x23, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x04, 0x03, 0x23, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3d, 0x03, 0x23, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x03, 0x03, 0x23, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x04, 0x03, 0x23, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x05, 0x03, 0x23, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x06, 0x03, 0x23, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x24, 0x03, 0x23, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x19, 0x02, 0x23, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x00, 0x02, 0x23, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x17, 0x02, 0x23, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x21, 0x03, 0x23, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x03, 0x9c, 0x9f, 0xfe, 0x79, 0x74, 0xff, 0xa3, 0x9c, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0c, 0x4d, 0xd8, 0xc6, 0x6d, 0xd7, 0x3b, 0xb1, 0x1f, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x2a, 0x19, 0x88, 0x31, 0x32, 0x5c, 0xdc, 0x7a, 0xbd, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x30, 0xb3, 0xfc, 0xd0, 0xe6, 0x84, 0x71, 0xcc, 0x0c, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x36, 0xdc, 0xcd, 0x23, 0xd8, 0x95, 0xe0, 0xcb, 0x45, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x3c, 0x25, 0x71, 0x86, 0x3b, 0xad, 0x5d, 0xfb, 0x14, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x09, 0xa9, 0x79, 0xff, 0xd4, 0x2b, 0xbc, 0xde, 0x6b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0f, 0xf5, 0x02, 0x45, 0x41, 0xd5, 0x4e, 0x81, 0x76, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x15, 0xf0, 0x47, 0x4a, 0x09, 0x16, 0xd2, 0xc6, 0xc2, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x1b, 0xb4, 0xbc, 0x5b, 0x82, 0xb4, 0x75, 0x4a, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x01, 0x7c, 0xb9, 0xe1, 0xb9, 0x70, 0x4c, 0x26, 0xa6, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x01, 0x71, 0x8b, 0xe9, 0xc7, 0x00, 0xbe, 0x76, 0x08, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x30, 0xc9, 0xbf, 0xee, 0x86, 0x7b, 0xf7, 0x3d, 0x1a, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x13, 0xc2, 0xbd, 0x36, 0xa4, 0xec, 0xdb, 0x23, 0xcb, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0b, 0x4b, 0xb4, 0xb1, 0xe8, 0x0e, 0x4d, 0x01, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x11, 0xd3, 0xd6, 0x70, 0xe2, 0x28, 0x10, 0x29, 0x94, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x17, 0x4e, 0xa8, 0x9c, 0x8f, 0x25, 0x6f, 0xc1, 0xf3, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x1d, 0x60, 0xdf, 0x9e, 0x4e, 0x1d, 0xa1, 0x86, 0xc7, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x23, 0x2d, 0x98, 0x18, 0x90, 0xe7, 0x2b, 0x09, 0x10, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x31, 0x93, 0x91, 0xa3, 0x2a, 0x14, 0x41, 0x01, 0x5b, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x16, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x17, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x19, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1a, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1b, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1c, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1d, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1e, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1f, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x20, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x21, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x22, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x23, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x24, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x25, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x26, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x27, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x28, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x29, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x2a, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x2b, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x32, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x0c, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x0d, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x19, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1a, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x20, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x21, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ]
    for packet in packets:
        result = 0
        for word in packet[:]:
            result = result ^ word
        print(repr(packet)+" "+hex(result))




def bulk_add():
    """
    Test this method
    Appears to be what we need
    """
    packets = [
        [0x55, 0x04, 0xd2, 0x2c, 0x00, 0x26, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2e, 0x01, 0x26, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x30, 0x02, 0x26, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2e, 0x03, 0x26, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2f, 0x03, 0x23, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3f, 0x03, 0x23, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x2c, 0x03, 0x23, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x0d, 0x03, 0x23, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x1c, 0x03, 0x23, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x1d, 0x03, 0x23, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3e, 0x03, 0x23, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3f, 0x03, 0x23, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x00, 0x03, 0x23, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x01, 0x03, 0x23, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x02, 0x03, 0x23, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x03, 0x03, 0x23, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x04, 0x03, 0x23, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x3d, 0x03, 0x23, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x03, 0x03, 0x23, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x04, 0x03, 0x23, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x05, 0x03, 0x23, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x06, 0x03, 0x23, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x24, 0x03, 0x23, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x19, 0x02, 0x23, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x00, 0x02, 0x23, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x17, 0x02, 0x23, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x04, 0xd2, 0x21, 0x03, 0x23, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x03, 0x9c, 0x9f, 0xfe, 0x79, 0x74, 0xff, 0xa3, 0x9c, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0c, 0x4d, 0xd8, 0xc6, 0x6d, 0xd7, 0x3b, 0xb1, 0x1f, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x2a, 0x19, 0x88, 0x31, 0x32, 0x5c, 0xdc, 0x7a, 0xbd, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x30, 0xb3, 0xfc, 0xd0, 0xe6, 0x84, 0x71, 0xcc, 0x0c, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x36, 0xdc, 0xcd, 0x23, 0xd8, 0x95, 0xe0, 0xcb, 0x45, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x3c, 0x25, 0x71, 0x86, 0x3b, 0xad, 0x5d, 0xfb, 0x14, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x09, 0xa9, 0x79, 0xff, 0xd4, 0x2b, 0xbc, 0xde, 0x6b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0f, 0xf5, 0x02, 0x45, 0x41, 0xd5, 0x4e, 0x81, 0x76, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x15, 0xf0, 0x47, 0x4a, 0x09, 0x16, 0xd2, 0xc6, 0xc2, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x1b, 0xb4, 0xbc, 0x5b, 0x82, 0xb4, 0x75, 0x4a, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x01, 0x7c, 0xb9, 0xe1, 0xb9, 0x70, 0x4c, 0x26, 0xa6, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x01, 0x71, 0x8b, 0xe9, 0xc7, 0x00, 0xbe, 0x76, 0x08, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x30, 0xc9, 0xbf, 0xee, 0x86, 0x7b, 0xf7, 0x3d, 0x1a, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x13, 0xc2, 0xbd, 0x36, 0xa4, 0xec, 0xdb, 0x23, 0xcb, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x0b, 0x4b, 0xb4, 0xb1, 0xe8, 0x0e, 0x4d, 0x01, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x11, 0xd3, 0xd6, 0x70, 0xe2, 0x28, 0x10, 0x29, 0x94, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x17, 0x4e, 0xa8, 0x9c, 0x8f, 0x25, 0x6f, 0xc1, 0xf3, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x1d, 0x60, 0xdf, 0x9e, 0x4e, 0x1d, 0xa1, 0x86, 0xc7, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x23, 0x2d, 0x98, 0x18, 0x90, 0xe7, 0x2b, 0x09, 0x10, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x0a, 0xb3, 0x31, 0x93, 0x91, 0xa3, 0x2a, 0x14, 0x41, 0x01, 0x5b, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x16, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xed, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x17, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x19, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1a, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1b, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1c, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1d, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1e, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1f, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x20, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x21, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x22, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x23, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x24, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x25, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x6e, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x26, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x27, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x6e, 0x18, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x28, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0x01, 0x1e, 0x01, 0x00, 0x00, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x29, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x18, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x2a, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0x01, 0x1e, 0x01, 0xff, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x2b, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x32, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x0c, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x0d, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x19, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x1a, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x20, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x01, 0x0f, 0x01, 0x99, 0x42, 0x0e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x55, 0x14, 0xc6, 0x21, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ]
    for packet in packets:
        # Remove trailing zeros
        position = 0
        last_non_zero_position = 0
        for cropword in packet:
            position += 1
            if cropword != 0x00:
                last_non_zero_position = position
        no_trailing_zeros = packet[:last_non_zero_position]
        # Remove last byte (checksum)
        message = no_trailing_zeros[:-1]
        expected = no_trailing_zeros[-1]
        # Add remaining bytes, overflowing at 256
        result = 0
        for word in message:
            result = result + word
            if result >= 256:
                result -= 256
        print("")
        print("packet,result: "+repr(packet)+" "+repr(result))
        print("result,expeted: "+repr(result)+" "+repr(expected))
        assert(result == expected)


def generate_checksum_from_valid_packet(packet):
    """Given a packet, generate the checksum for it.
    This function is intended for sniffed packets.
    Also to make sure we knwo how to calculate valid checksums.
    """
    assert(len(packet) is 32)
    # Remove trailing zeros
    position = 0
    last_non_zero_position = 0
    for cropword in packet:
        position += 1
        if cropword != 0x00:
            last_non_zero_position = position
    no_trailing_zeros = packet[:last_non_zero_position]
    # Remove last byte (checksum)
    message = no_trailing_zeros[:-1]
    expected = no_trailing_zeros[-1]
    # Add remaining bytes, overflowing at 256
    result = 0
    for word in message:
        result = result + word
        if result >= 256:
            result -= 256
    assert(result == expected)
    return result


def generate_checksum_for_command(command):
    """
    Given a command (without checksum or trailing zeroes),
    generate a checksum for it.
    """
    assert(len(command) <= 31)
    # Add bytes, overflowing at 256
    result = 0
    for word in command:
        result = result + word
        if result >= 256:
            result -= 256
    return result


def pad_message(message):
    """Pad a message to 32 bytes"""
    assert(len(message) <= 32)
    while(len(message) < 32):
        message.append(0x00)
    return message


def convert_command_to_packet(command):
    assert(len(command) <= 31)
    checksum = generate_checksum_for_command(command)
    packet = command+[checksum]
    while len(packet) < 32:
        packet.append(0x00)
    return packet











def test_expected_checksums():
    packets = [
    [0x55,0x14,0xc6,0x0e,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xe2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x1a,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x14,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xe8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x20,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xf4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x26,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xfa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x2c,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x32,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x38,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x3e,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x04,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xd8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x0a,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xde,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x10,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xe4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x16,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xea,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x1c,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x55,0x14,0xc6,0x22,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xf6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    ]

    for original_packet in packets:
        expected_checksum = original_packet[22]
        subsections = [
            original_packet[0:22],
            original_packet[1:22],
            original_packet[2:22],
            ]
        for subsection in subsections:
            # Run checksum algorithm
            checksum_functions = [
                compute_checksum_add,
                compute_checksum_bitwise_add,
                compute_checksum_overflow_add,
                compute_checksum_overflow_bitwise_add,
                ]
            for checksum_function in checksum_functions:
                print("\n\n")
                generated_checksum = checksum_function(byte_list=subsection)
                current_packet = subsection+[generated_checksum]
                # Pad to 32 bytes
                while ( len(current_packet) < 32):
                    current_packet.append(0)
                print("checksum_function:"+repr(checksum_function))
                print("subsection:"+repr(subsection))
                print("expected_checksum:"+repr(expected_checksum))
                print("generated_checksum: "+repr(generated_checksum))
                print("original_packet: "+repr(original_packet))
                print("current_packet: "+repr(current_packet))
                # Test if it worked
                if (expected_checksum == generated_checksum):
                    print "Match!"
                    print repr(locals())
                    #assert(current_packet == original_packet)
                    #assert(False)# We found it
    return



def generate_checksum_for_counter():
    original_packet = [0x55,0x14,0xc6,0x0e,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0xe2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
    checksum_and_trailing_zeroes_removed = [0x55,0x14,0xc6,0x0e,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18]

    counter = -1
    while counter < 256:
        counter += 1
        current_command = checksum_and_trailing_zeroes_removed[:3]+[counter]+checksum_and_trailing_zeroes_removed[4:]
        print("current_command: "+repr(current_command))
        checksum = compute_checksum(byte_list=current_command)
        current_packet = current_command+[checksum]
        # Pad to 32 bytes
        while (len(current_packet) < 32):
            current_packet.append(0)
        print("current_packet: "+repr(current_packet))
        dev.write(1, current_packet)
        time.sleep(2)




def main():
    bulk_add()
    #bulk_xor()
    #test_xor_parity()
    #test_expected_checksums()
    #packet = [0x55,0x14,0xc6,0x0e,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,0x01,0x1e,0x01,0xff,0x00,0x18,]
    #expected_checksum = 0xe2
    #generated_checksum = compute_checksum_overflow_bitwise_add(packet[1:])
    #print("expected_checksum:"+repr(expected_checksum))
    #print("generated_checksum: "+repr(generated_checksum))


if __name__ == '__main__':
    main()
